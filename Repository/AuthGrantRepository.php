<?php

namespace triguk\AuthorizationBundle\Repository;

use triguk\AuthorizationBundle\Entity\AuthGrant;
use triguk\AuthorizationBundle\Entity\AuthRole;
use triguk\AuthorizationBundle\Entity\AuthPermission;
use triguk\AuthorizationBundle\Entity\AuthScope;
use triguk\AuthorizationBundle\Entity\AuthObject;
use Doctrine\ORM\EntityManager;


/**
 * AuthGrantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AuthGrantRepository extends \Doctrine\ORM\EntityRepository implements AuthGrantRepositoryInterface
{
    protected $manager;
    
    public function __construct(EntityManager $manager)
    {
        $this->manager=$manager;
    }
    public function getAllGrants()
    {
        $query = $this->manager
            ->createQueryBuilder('g')
            ->select('g','r','o','s','p')
            ->from('trigukAuthorizationBundle:AuthGrant', 'g')
            ->join('g.authRole','r')
            ->join('g.authObject','o')
            ->join('g.authScope','s')
            ->join('g.authPermission','p')
            ->getQuery();        
        //echo $query;    
        $results = $query->getResult();
        return $results;
    }    
    public function grantExists(AuthRole $role, AuthObject $object, AuthScope $scope, AuthPermission $permission)
    {
        $query = $this->manager
            ->createQueryBuilder('g')
            ->select('g')
            ->from('trigukAuthorizationBundle:AuthGrant', 'g')
            ->where('g.authRole = :auth_role')
            ->andWhere('g.authObject = :auth_object')
            ->andWhere('g.authPermission = :auth_permission')
            ->andWhere('g.authScope = :auth_scope')
            ->setParameter('auth_role', $role)
            ->setParameter('auth_object', $object)
            ->setParameter('auth_permission', $permission)
            ->setParameter('auth_scope', $scope)
            ->getQuery();        
        //echo $query;    
        $results = $query->getResult();
        $resultCount = count($results);    
        return $resultCount>0;
    }
    public function findAll()
    {
        /*
        $query = $this->manager
            ->createQueryBuilder('g')
            ->select('g','r','o','s','p')
            ->from('trigukAuthorizationBundle:AuthGrant', 'g')
            ->innerJoin('trigukAuthorizationBundle:AuthRole','r','WITH','g.authRole = r')
            ->innerJoin('trigukAuthorizationBundle:AuthObject','o','WITH','g.authObject = o')
            ->innerJoin('trigukAuthorizationBundle:AuthScope','s','WITH','g.authScope = s')
            ->innerJoin('trigukAuthorizationBundle:AuthPermission','p','WITH','g.authPermission = p')
            ->getQuery();        
        
        $query = $this->manager
            ->createQueryBuilder('g')
            ->select('g','r','o','s','p')
            ->from('trigukAuthorizationBundle:AuthGrant', 'g')
            ->innerJoin('g.authRole', 'r')
            ->innerJoin('g.authObject', 'o')
            ->innerJoin('g.authScope', 's')
            ->innerJoin('g.authPermission', 'p')
            ->getQuery();        
        $query = $this->manager
            ->createQueryBuilder('g')
            ->select('g','o','p')
            ->from('trigukAuthorizationBundle:AuthGrant', 'g')
            
            ->innerJoin('g.authObject', 'o')
            ->innerJoin('g.authPermission', 'p')
            ->getQuery();        
        $query=$this->manager->createQuery('SELECT g,r,o,s,p FROM trigukAuthorizationBundle:AuthGrant g JOIN g.authRole r JOIN g.authObject o JOIN g.authScope s JOIN g.authPermission p');
        */
        $query=$this->manager->createQuery('SELECT g FROM trigukAuthorizationBundle:AuthGrant g');
        //echo $query;    
        $results = $query->getResult();
        return $results;
    }    
    public function addGrant(AuthRole $role, AuthObject $object, AuthScope $scope, AuthPermission $permission)
    {
        if (!$this->grantExists($role,$object,$scope,$permission))
        {
            $grant=new AuthGrant();
            $grant->setAuthRole($role);
            $grant->setAuthObject($object);
            $grant->setAuthPermission($permission);
            $grant->setAuthScope($scope);
            $this->manager->persist($grant);
            $this->manager->flush();
        }
    }
    public function clearRoleGrants(AuthRole $role)
    {
        $query=$this->manager
             ->createQuery('DELETE FROM trigukAuthorizationBundle:AuthGrant g WHERE g.authRole=:role')
             ->setParameter('role', $role);
        $query->getResult();
        
    }
        
    public function clearRoleObjectGrants(AuthRole $role, AuthObject $object)
    {
        $query=$this->manager
             ->createQuery('DELETE FROM trigukAuthorizationBundle:AuthGrant g WHERE g.authRole=:role AND g.authObject=:object')
             ->setParameter('role', $role)
             ->setParameter('object', $object);
        $query->getResult();
        
    }

    public function clearRoleObjectScopeGrants(AuthRole $role, AuthObject $object, AuthScope $scope)
    {
       
        $query=$this->manager
             ->createQuery('DELETE FROM trigukAuthorizationBundle:AuthGrant g WHERE g.authRole=:role AND g.authObject=:object AND g.authScope=:scope')
             ->setParameter('role', $role)
             ->setParameter('object', $object)
             ->setParameter('scope', $scope);
        $query->getResult();
        
    }    
    public function findByRoleObjectScope(AuthRole $role, AuthObject $object, AuthScope $scope)
    {
       
        $query=$this->manager
             ->createQuery('SELECT g FROM trigukAuthorizationBundle:AuthGrant g WHERE g.authRole=:role AND g.authObject=:object AND g.authScope=:scope')
             ->setParameter('role', $role)
             ->setParameter('object', $object)
             ->setParameter('scope', $scope);
        return $query->getResult();
        
    } 
    public function addRoleObjectScopeGrants(AuthRole $role, AuthObject $object, AuthScope $scope,$permissions)
    {
        foreach ($permissions as $permission)
        {
            
            $this->addGrant($role,$object, $scope,$permission);    
        }
    }
    
    public function syncRoleObjectScopeGrants(AuthRole $role, AuthObject $object, AuthScope $scope,$permissions)
    {
        $this->clearRoleObjectScopeGrants($role,$object,$scope);

        foreach ($permissions as $permission)
        {
            
            $this->addGrant($role,$object, $scope,$permission);    
        }
    }
        
    public function syncRoleObjectGrants(AuthRole $role, AuthObject $object, $grants)
    {
        //echo "Sync start\n";
        $this->clearRoleObjectGrants($role,$object);
        //return;
        foreach ($grants as $grant)
        {
            if (array_key_exists('scope',$grant) && 
                array_key_exists('permission',$grant) )
            {
                $scope=$grant['scope'];
                $permission=$grant['permission'];
            }
            else
                throw new exception ('$grants parameter must contain one or more elements of the following content: ["scope"=>instance of AuthScope, "permission"=>instance of AuthPermission]');
                
            $this->addGrant($role,$object, $scope,$permission);    
        }
    }

    public function syncRoleGrants(AuthRole $role, $grants)
    {
        $this->clearRoleGrants($role);
        
        foreach ($grants as $grant)
        {
            if (array_key_exists('scope',$grant) && 
                array_key_exists('permission',$grant) && 
                array_key_exists('object',$grant) )
            {
                $scope=$grant['scope'];
                $permission=$grant['permission'];
                $object=$grant['object'];
            }
            else
                throw new exception ('$grants parameter must contain one or more elements of the following content: ["object"=>instance of AuthObject,"scope"=>instance of AuthScope, "permission"=>instance of AuthPermission]');
                
            $this->addGrant($role,$object, $scope,$permission);    
        }
    }  
    public function syncGrants($grants)
    {
        foreach ($grants as $grant)
        {
            if (array_key_exists('scope',$grant) && 
                array_key_exists('permission',$grant) && 
                array_key_exists('object',$grant) &&
                array_key_exists('role',$grant) )
            {
                $scope=$grant['scope'];
                $permission=$grant['permission'];
                $object=$grant['object'];
                $role=$grant['role'];
            }
            else
                throw new exception ('$grants parameter must contain one or more elements of the following content: ["role"=>instance of AuthRole, "object"=>instance of AuthObject,"scope"=>instance of AuthScope, "permission"=>instance of AuthPermission]');
                
            $this->addGrant($role,$object, $scope,$permission);    
        }
    }       
}
